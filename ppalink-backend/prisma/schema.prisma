// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String     @id @default(uuid())
  email           String     @unique
  phone           String?    @unique
  passwordHash    String
  passwordResetRequired Boolean @default(false)
  role            Role
  emailVerifiedAt DateTime?
  status          UserStatus @default(ACTIVE)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  hasCompletedAdminOnboarding Boolean @default(false)
  twoFactorSecret         String?  // The encrypted secret key for the authenticator app
  isTwoFactorEnabled      Boolean  @default(false)
  auditLogs       AuditLog[] @relation("AdminActions")
  activityLogs    ActivityLog[]
  candidateProfile CandidateProfile?
  agencyMembers    AgencyMember[]
  messagesSent     Message[] @relation("MessageFromUser")
  messagesReceived Message[] @relation("MessageToUser")

  verifications    Verification[] @relation("UserVerifications")
  reviewsDone      Verification[] @relation("UserReviewedVerifications")

  verifiedCertificates CandidateCertificate[] @relation("UserVerifiedCertificates")
  ownedAgencies Agency[]
  notifications Notification[]
  sentInvitations Invitation[] @relation("SentInvitations")
}

enum Role {
  CANDIDATE
  AGENCY
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

model CandidateProfile {
  id              String     @id @default(uuid())
  userId          String     @unique
  user            User       @relation(fields: [userId], references: [id])
  firstName       String
  lastName        String
  phone           String?    @unique
  dob             DateTime?
  gender          String?
  nyscNumber      String?    @unique
  nyscBatch       String?
  nyscStream      String?
  callupHash      String?    
  stateCode       String?
  primaryStateId  Int?
  lgaId           Int?
  disabilityInfo  String?
  isVerified      Boolean    @default(false)
  verificationLevel VerificationLevel @default(UNVERIFIED)
  isRemote        Boolean    @default(false)
  isOpenToReloc   Boolean    @default(false)
  salaryMin       Int?
  salaryMax       Int?
  availability    DateTime?
  workAuth        String?
  summary         String?
  linkedin        String?
  portfolio       String?
  graduationYear  Int?
  gpaBand         String?

  cvFileKey       String?
  nyscFileKey     String?

  workExperiences WorkExperience[]
  education       Education[]
  skills          CandidateSkill[]
  certificates    CandidateCertificate[]
  credentials     Credential[]
  applications    Application[]
  shortlists      Shortlist[]
  quizAttempts QuizAttempt[]
  hasCompletedOnboarding Boolean @default(false)
}

model WorkExperience {
  id          String    @id @default(uuid())
  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  company     String
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime? // Optional: null if it's the current job
  isCurrent   Boolean   @default(false)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Education {
  id          String    @id @default(uuid())
  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  institution String
  degree      String
  field       String?
  grade       String?
  startDate   DateTime
  endDate     DateTime

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum VerificationLevel {
  UNVERIFIED
  EMAIL_VERIFIED
  ID_VERIFIED
  NYSC_VERIFIED
  CERTS_VERIFIED
  AGENCY_DOMAIN_VERIFIED
  AGENCY_CAC_VERIFIED
}

model CandidateSkill {
  id          String            @id @default(uuid())
  candidateId String
  candidate   CandidateProfile  @relation(fields: [candidateId], references: [id])
  skillId     Int
  skill       Skill             @relation(fields: [skillId], references: [id])
  level       Int
  years       Int?
}

model Skill {
  id        Int                @id @default(autoincrement())
  name      String             @unique
  slug      String             @unique
  candidates CandidateSkill[]
  positions PositionSkill[]
  quizzes Quiz[]
  verifiedAttempts QuizAttempt[]
}

model CandidateCertificate {
  id          String            @id @default(uuid())
  candidateId String
  candidate   CandidateProfile  @relation(fields: [candidateId], references: [id])
  title       String
  issuer      String
  issuedAt    DateTime?
  fileKey     String            
  fileHash    String
  verified    Boolean           @default(false)
  verifierId  String?
  verifiedBy  User?             @relation("UserVerifiedCertificates", fields: [verifierId], references: [id])
}


model Credential {
  id          String    @id @default(uuid())
  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id])
  fileUrl     String
  type        String    
  hash        String    
  verified    Boolean   @default(false)
}

model Agency {
  id            String         @id @default(uuid())
  ownerUserId   String
  owner         User           @relation(fields: [ownerUserId], references: [id])
  name          String
  rcNumber      String?
  industryId         Int?
  industry           Industry?            @relation(fields: [industryId], references: [id])
  website       String?
  domain        String?        @unique
  sizeRange     String?
  domainVerified Boolean       @default(false)
  cacVerified    Boolean       @default(false)
  logoKey       String?
  headquartersStateId Int?
  lgaId         Int?
  createdAt     DateTime       @default(now())
  hasCompletedOnboarding  Boolean        @default(false)

  members       AgencyMember[]
  positions     Position[]
  shortlists    Shortlist[]
  subscriptions AgencySubscription[]
  invitations   Invitation[]
}

model AgencyMember {
  id        String  @id @default(uuid())
  agencyId  String
  agency    Agency  @relation(fields: [agencyId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  role      AgencyRole
}

enum AgencyRole {
  OWNER
  MANAGER
  RECRUITER
}

model Position {
  id           String      @id @default(uuid())
  agencyId     String
  agency       Agency      @relation(fields: [agencyId], references: [id])
  title        String
  description  String
  employmentType EmploymentType
  isRemote     Boolean     @default(false)
  stateId      Int?
  lgaId        Int?
  minSalary    Int?
  maxSalary    Int?
  skillsReq    Json?
  visibility   PositionVisibility
  status       PositionStatus @default(OPEN)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  applications Application[]
  skills       PositionSkill[]
}

enum EmploymentType {
  INTERN
  NYSC
  FULLTIME
  PARTTIME
  CONTRACT
}

enum PositionVisibility {
  PUBLIC
  PRIVATE
}

enum PositionStatus {
  DRAFT
  OPEN
  CLOSED
}

model Application {
  id          String     @id @default(uuid())
  positionId  String
  position    Position   @relation(fields: [positionId], references: [id])
  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id])
  status      ApplicationStatus @default(APPLIED)
  notes       String?
  createdAt   DateTime   @default(now())

  matchScore   Int?      // The calculated score (0-100) at the time of application

  interviews Interview[]
  offers Offer[]
}


enum ApplicationStatus {
  APPLIED
  REVIEWING
  INTERVIEW
  OFFER
  HIRED
  REJECTED
  WITHDRAWN
}

model Shortlist {
  id          String           @id @default(uuid())
  agencyId    String
  agency      Agency           @relation(fields: [agencyId], references: [id])
  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id])
  source      ShortlistSource
  createdAt   DateTime         @default(now())
}

enum ShortlistSource {
  SEARCH
  IMPORT
  PRIVATE_ROLE
}

model Message {
  id        String   @id @default(uuid())
  fromId    String
  from      User     @relation("MessageFromUser", fields: [fromId], references: [id])
  toId      String
  to        User     @relation("MessageToUser", fields: [toId], references: [id])
  subject   String?
  body      String
  createdAt DateTime @default(now())
  readAt    DateTime?
}

enum NotificationType {
  GENERIC
  MESSAGE
  NEW_QUIZ
}

model Notification {
  id        String    @id @default(uuid())
  userId    String    // The ID of the User who should receive the notification
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type      NotificationType @default(GENERIC)
  message   String    // The content of the notification (e.g., "Your application for Software Engineer was updated.")
  link      String?   // An optional link to navigate to when the notification is clicked (e.g., "/dashboard/candidate/applications")
  read      Boolean   @default(false)
  meta      Json?
  
  createdAt DateTime  @default(now())

  @@index([userId])
}

model Interview {
  id           String     @id @default(uuid())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])
  scheduledAt   DateTime
  mode          InterviewMode
  location      String?
  status        InterviewStatus @default(SCHEDULED)
  details       String?
}

enum InterviewMode {
  INPERSON
  REMOTE
  PHONE
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}

model Offer {
  id           String     @id @default(uuid())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])
  salary        Int?
  startDate     DateTime?
  status        OfferStatus @default(PENDING)
}

enum OfferStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

model SubscriptionPlan {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Int
  currency    String    @default("NGN")
  features    Json

  stripePriceId String  @unique // The ID of the price object in Stripe
  
  jobPostLimit Int      @default(1)
  memberLimit  Int @default(1)

  agencies    AgencySubscription[]
}

model AgencySubscription {
  id           String     @id @default(uuid())
  agencyId     String     @unique
  agency       Agency     @relation(fields: [agencyId], references: [id])
  planId       String
  plan         SubscriptionPlan @relation(fields: [planId], references: [id])
  endDate      DateTime?

  stripeSubscriptionId String   @unique
  stripeCustomerId     String   @unique
  stripeCurrentPeriodEnd DateTime?

  status       SubscriptionStatus @default(ACTIVE)
  createdAt    DateTime @default(now())
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELED
  INCOMPLETE
}

model Invitation {
  id        String   @id @default(uuid())
  email     String   // Email of the person being invited
  agencyId  String   // The agency they are being invited to
  agency    Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  inviterId String   // The user ID of the person who sent the invite
  inviter   User     @relation("SentInvitations", fields: [inviterId], references: [id])
  
  token     String   @unique // A secure, single-use token for accepting the invite
  expiresAt DateTime
  
  status    InvitationStatus @default(PENDING)

  createdAt DateTime @default(now())

  @@unique([email, agencyId]) // A user can only be invited to the same agency once
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

model Verification {
  id        String       @id @default(uuid())

  userId    String
  user      User         @relation("UserVerifications", fields: [userId], references: [id])

  type      VerificationType
  status    VerificationStatus
  evidence  Json?

  reviewedBy String?
  reviewer   User?        @relation("UserReviewedVerifications", fields: [reviewedBy], references: [id])

  createdAt DateTime     @default(now())
}


enum VerificationType {
  EMAIL
  DOMAIN
  CAC
  NYSC
  NIN
  CERTIFICATE
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

model LocationState {
  id   Int     @id @default(autoincrement())
  name String  @unique
  lgas LocationLGA[]
}

model LocationLGA {
  id     Int    @id @default(autoincrement())
  name   String
  stateId Int
  state  LocationState @relation(fields: [stateId], references: [id])
}

model Industry {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  isHeading Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  agencies  Agency[]
}

model PositionSkill {
  positionId String
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)
  skillId    Int
  skill      Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  requiredLevel QuizLevel @default(BEGINNER)

  @@id([positionId, skillId]) // Composite primary key
}

model AuditLog {
  id        String    @id @default(uuid())
  actorId   String    // ID of the admin user who performed the action
  actor     User      @relation("AdminActions", fields: [actorId], references: [id])
  action    String    // e.g., "user.suspend", "verification.approve", "plan.edit"
  targetId  String?   // The ID of the entity that was acted upon (e.g., a UserId, AgencyId, JobId)
  metadata  Json?     // Store before/after values or other context
  createdAt DateTime  @default(now())

  @@index([actorId])
  @@index([targetId])
}

model ActivityLog {
  id        String    @id @default(uuid())
  userId    String    // The ID of the User who performed the action
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  action    String    // A machine-readable action name, e.g., "user.login", "job.create"
  details   Json?     // Optional context, e.g., { "jobId": "...", "jobTitle": "..." }
  
  createdAt DateTime  @default(now())

  @@index([userId])
}

model Setting {
  key         String @id // e.g., "maintenanceMode", "freeJobLimit"
  value       Json
  description String?
  updatedAt   DateTime @updatedAt
}

model FeatureFlag {
  name        String  @id // e.g., "enableAiRecommendations"
  description String?
  isEnabled   Boolean @default(false)
}

enum QuizLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Quiz {
  id          String   @id @default(uuid())
  title       String   @unique // e.g., "JavaScript Fundamentals"
  description String?
  skillId     Int?     // Optional: Link this quiz directly to a Skill
  skill       Skill?   @relation(fields: [skillId], references: [id])
  level       QuizLevel @default(BEGINNER)
  
  questions   Question[]
  attempts    QuizAttempt[]
}

// A single question within a quiz.
model Question {
  id        String   @id @default(uuid())
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  text      String   // The question text
  options   Json     // e.g., ["ES5", "ES6", "ES7", "ES8"]
  
  correctAnswer String
}

// Tracks a candidate's attempt at a specific quiz.
model QuizAttempt {
  id           String    @id @default(uuid())
  candidateId  String
  candidate    CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  
  quizId       String
  quiz         Quiz      @relation(fields: [quizId], references: [id])

  skillId      Int?      // The specific skill this attempt verifies
  skill        Skill?    @relation(fields: [skillId], references: [id])

  level        QuizLevel? // The level of the quiz that was attempted
  
  score        Int       // e.g., 80 (representing 80%)
  passed       Boolean
  
  startedAt    DateTime  @default(now())
  completedAt  DateTime?

  nextRetryAvailableAt DateTime?
}